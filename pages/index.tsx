import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useMemo, useState } from "react";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const [input, setInput] = useState("");

  const translatedText = useMemo(() => {
    return normalTextToGoblinText(input);
  }, [input]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>goblin translator</h1>

        <textarea
          style={{
            fontFamily: "'Open Sans', sans-serif",
          }}
          name=""
          id=""
          cols="30"
          rows="10"
          onChange={(e) => {
            setInput(e.target.value);
          }}
        ></textarea>

        <div>{translatedText}</div>
      </main>
    </div>
  );
};

export default Home;

const normalTextToGoblinText = (inputText: string) => {
  const tokens = inputText.split("");

  for (let i = 0; i < tokens.length; i++) {
    const currentCharacter = tokens[i];
    const currentCharacterLowercase = currentCharacter.toLowerCase();
    const mappingExistsForCurrentCharacter = Boolean(
      CHARACTER_MAPPING[currentCharacter]
    );
    const mappingExistsForCurrentCharacterLowercase = Boolean(
      CHARACTER_MAPPING[currentCharacterLowercase]
    );

    if (mappingExistsForCurrentCharacter) {
      tokens[i] = CHARACTER_MAPPING[currentCharacter];
    } else if (mappingExistsForCurrentCharacterLowercase) {
      tokens[i] = CHARACTER_MAPPING[currentCharacterLowercase];
    }
  }
  return (inputText = tokens.join(""));
};

const CHARACTER_MAPPING: Record<string, string> = {
  0: "‚ÇÄ",
  1: "‚ÇÅ",
  2: "‚ÇÇ",
  3: "‚ÇÉ",
  4: "‚ÇÑ",
  5: "‚ÇÖ",
  6: "‚ÇÜ",
  7: "‚Çá",
  8: "‚Çà",
  9: "‚Çâ",
  a: "‚Çê",
  e: "‚Çë",
  h: "‚Çï",
  i: "·µ¢",
  j: "‚±º",
  k: "‚Çñ",
  l: "‚Çó",
  m: "‚Çò",
  n: "‚Çô",
  o: "‚Çí",
  p: "‚Çö",
  r: "·µ£",
  s: "‚Çõ",
  t: "‚Çú",
  u: "·µ§",
  v: "·µ•",
  x: "‚Çì",
  A: "‚Çê",
  B: "B",
  C: "C",
  D: "D",
  E: "‚Çë",
  F: "F",
  G: "G",
  H: "‚Çï",
  I: "·µ¢",
  J: "‚±º",
  K: "‚Çñ",
  L: "‚Çó",
  M: "‚Çò",
  N: "‚Çô",
  O: "‚Çí",
  P: "‚Çö",
  Q: "Q",
  R: "·µ£",
  S: "‚Çõ",
  T: "‚Çú",
  U: "·µ§",
  V: "·µ•",
  W: "W",
  X: "‚Çì",
  Y: "Y",
  Z: "Z",
  "+": "‚Çä",
  "-": "‚Çã",
  "=": "‚Çå",
  "(": "‚Çç",
  ")": "‚Çé",
  y: "·µß",
  b: "·µ¶",
  q: "·µ©",
  z: "ùìè",
  w: "ùìå",
  c: "ùí∏",
  d: "ùíπ",
  f: "ùíª",
  g: "ùì∞",
};
